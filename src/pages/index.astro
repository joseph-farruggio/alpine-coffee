---
import Layout from '../layouts/Layout.astro'
import Menu from '../components/Menu.astro'
import Queue from '../components/Queue.astro'
import ActiveOrders from '../components/ActiveOrders.astro'
import Notifications from '../components/Notifications.astro'
---

<Layout title="Welcome to Alpine Coffee.">
	<main x-data="coffeeShop" @order-added.window="placeOrder($event.detail.drink, $event.detail.customer)" class="flex gap-32 justify-center relative">
		<Menu />
		<Queue />
		<ActiveOrders />
		<Notifications />
	</main>
</Layout>

<script>
	import Alpine from 'alpinejs'
	import persist from '@alpinejs/persist'
 
	Alpine.plugin(persist)

	Alpine.data('coffeeShop', function() {
		return {
			queue: this.$persist([]),

			baristas: this.$persist({
				1: {},
				2: {},
				3: {}
			}),

			customer: null,

			placeOrder(order) {
				// Save the customer name to the order
				order.customer = order.customer ? order.customer : this.customer
				
				// Set a random ID to the order if one doesn't exist
				order.id = order.id ? order.id : Math.floor(Math.random() * 1000000)

				const baristaKey = this.findOpenBarista()
				
				// If there are no open baristas, add the order to the queue
				if (baristaKey === false) {
					this.queue.push(order)
					return
				}

				this.makeCoffee(order, baristaKey)
			},

			findOpenBarista() {
				for (let key in this.baristas) {
					if (!this.baristaIsBusy(key)) {
						return key
					}
				}
				
				// No open baristas
				return false
			},

			makeCoffee(order = null, baristaKey) {
				// If no order is passed, get the first order in the queue
				if (order === null) {
					order = this.queue[0]
				} 

				// Delay moving the order out of the queue to be after the barista has finished
				this.queue.shift()
				this.baristas[baristaKey] = order
			
				this.completeOrder(order, baristaKey)
			},

			completeOrder(order, baristaKey) {
				order.startTime = new Date().getTime()

				// Set wait for the order to be completed
				// Trainee is 50% slower
				let wait = baristaKey == 2 ? (order.waitTime * 1500) : order.waitTime * 1000
				
				// create an interval to check every second if the order is complete based on the wait time and the startTime
				let interval = setInterval(() => {
					let now = new Date().getTime()
					let timeLeft = order.startTime + wait - now

					// If the order is complete, clear the interval
					if (timeLeft <= 0) {
						clearInterval(interval)
						this.baristas[baristaKey] = {}
						
						// Remove the order from the active orders
						this.$dispatch('order-complete', order)

						// If there are any orders in the queue, make the next one
						if (this.queue.length > 0) {
							let nextOrder = this.queue[0]
							
							this.placeOrder(nextOrder)
						}	
						return
					}

					// Update the order with the time left
					this.baristas[baristaKey].timeLeft = timeLeft
				}, 50)				
			},

			baristaIsBusy(key) {
				if (this.baristas[key] === undefined) {
					return false
				}

				return Object.keys(this.baristas[key]).length > 0
			},

			completionPercentage(startTime, timeLeft) {
				const currentTime = Date.now();
				const elapsedTime = currentTime - startTime;
				const totalTime = elapsedTime + timeLeft;
				const percentageCompleted = (elapsedTime / totalTime) * 100;
				return percentageCompleted.toFixed(2); // Optional: Round to two decimal places
			},

			checkOnInit() {
				let queueIndex = 0
				
				// Look for the first non-null barista and resume making coffee
				Object.keys(this.baristas).forEach((key) => {
					if (this.baristaIsBusy(key)) {
						this.completeOrder(this.baristas[key], key)
						return
					}

					if (this.queue.length > 0) {
						if (this.baristaIsBusy(key) && queueIndex < this.queue.length) {
							const order = this.queue[queueIndex]
							this.makeCoffee(order, key)
							queueIndex++
						} else {
							return
						}
					}
				})
			},

			clear() {
				this.queue = []
				this.baristas[0] = {}
				this.baristas[1] = {}
				this.baristas[2] = {}
			},

			init() {
				// Easily access Alpine data and methods from the console
				window.App = this.$data

				if (window.location.search.includes('clear')) {
					this.clear()
				}

				if (window.location.search.includes('test')) {
					this.clear()

					this.queue = [
						{
							"title": "Black Coffee",
							"description": "Our classic black coffee, made with freshly brewed Arabica beans.",
							"type": "hot",
							"price": 2.50,
							"waitTime": 4,
							"customer": "Third",
							"image": "/coffee/black-coffee.jpg",
							"id": 4
						},
						{
							"title": "Iced Coffee",
							"waitTime": 8,
							"customer": "Fourth",
							"image": "/coffee/black-coffee.jpg",
							"id": 5
						}
					]

					this.baristas = {
						0: {
							"title": "Black Coffee",
							"description": "Our classic black coffee, made with freshly brewed Arabica beans.",
							"type": "hot",
							"price": 2.50,
							"waitTime": 1,
							"customer": "First",
							"image": "/coffee/black-coffee.jpg",
							"id": 1
						},
						1: {
							"title": "Black Coffee",
							"description": "Our classic black coffee, made with freshly brewed Arabica beans.",
							"type": "hot",
							"price": 2.50,
							"waitTime": 4,
							"customer": "Second",
							"image": "/coffee/black-coffee.jpg",
							"id": 2
						},
						2: {
							"title": "Black Coffee",
							"description": "Our classic black coffee, made with freshly brewed Arabica beans.",
							"type": "hot",
							"price": 2.50,
							"waitTime": 20,
							"customer": "Fifth",
							"image": "/coffee/black-coffee.jpg",
							"id": 3
						}
					}
				}

				this.checkOnInit()
			}
		}
	})
</script>